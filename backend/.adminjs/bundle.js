(function (React, designSystem, adminjs) {
    'use strict';

    function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

    var React__default = /*#__PURE__*/_interopDefault(React);

    // components/my-user-editor.jsx

    new adminjs.ApiClient();
    const RoleUser = props => {
      const [selected, setSelected] = React__default.default.useState([]);
      const [roles, setRoles] = React__default.default.useState([]);
      const [email, setEmail] = React__default.default.useState(props.record.params.email);
      const [secret, setSecret] = React__default.default.useState("");
      const [rolesIn, setRolesIn] = React__default.default.useState([]);
      React__default.default.useEffect(() => {
        // Fetch all users from your API
        createToken();
      }, []);
      React__default.default.useEffect(() => {
        if (secret) {
          getRoles();
          getUser().then(data => setRolesIn(data.role));
        }
      }, [secret]);
      const handleChange = event => {
        // Update the record with the selected users
        const selectedOptions = Array.from(event.target.selectedOptions);
        // Преобразуем массив в список значений
        const selectedValues = selectedOptions.map(option => option.value);
        // Обновляем состояние
        setSelected(selectedValues);
      };
      const createToken = async () => {
        const response = await fetch("/api/auth/signin/", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            email: "admin@mail.com",
            password: "admin"
          })
        });
        let data = await response.json();
        setSecret(data.token);
        return data;
      };
      const getRoles = async () => {
        const response = await fetch("/api/roles/", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            secret: secret
          })
        });
        let data = await response.json();
        setRoles(Object.values(data));
        return data;
      };
      const getUser = async () => {
        const response = await fetch("/api/user/", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            secret: secret,
            idOrEmail: email
          })
        });
        let data = await response.json();
        return data;
      };
      const saveRoles = async () => {
        const response = await fetch("/api/user/update", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            secret: secret,
            email: email,
            role: selected
          })
        });
        let data = await response.json();
        return data;
      };
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        variant: "grey"
      }, /*#__PURE__*/React__default.default.createElement("div", null, "Selected roles:", " ", rolesIn.map(role => /*#__PURE__*/React__default.default.createElement("p", {
        key: Math.random()
      }, role.title))), /*#__PURE__*/React__default.default.createElement("br", null), /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Role"), /*#__PURE__*/React__default.default.createElement("select", {
        value: selected,
        onChange: handleChange,
        multiple: true
      }, roles.map(role => /*#__PURE__*/React__default.default.createElement("option", {
        key: role.id,
        value: role.title
      }, role.title))), /*#__PURE__*/React__default.default.createElement("button", {
        onClick: () => saveRoles()
      }, "Save roles"));
    };

    // components/my-role-editor.jsx

    const api = new adminjs.ApiClient();
    const UserRole = props => {
      const {
        record,
        onChange
      } = props;
      const [roles, setRoles] = React__default.default.useState([]);
      React__default.default.useEffect(() => {
        // Fetch all roles from your API
        api.resourceAction({
          resourceId: 'Role',
          actionName: 'list'
        }).then(response => {
          setRoles(response.data.records);
        });
      }, []);
      const handleChange = event => {
        // Update the record with the selected roles
        const selectedRoles = event.target.value;
        onChange({
          ...record,
          params: {
            ...record.params,
            role: selectedRoles
          },
          populated: {
            ...record.populated,
            role: roles.filter(role => selectedRoles.includes(role.id))
          }
        });
      };
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        variant: "grey"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "User"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
        value: record.params.role || [],
        onChange: handleChange,
        multiple: true // add this property
      }, roles.map(role => /*#__PURE__*/React__default.default.createElement("option", {
        key: role.id,
        value: role.id
      }, role.params.title))));
    };

    AdminJS.UserComponents = {};
    AdminJS.UserComponents.RoleUser = RoleUser;
    AdminJS.UserComponents.UserRole = UserRole;

})(React, AdminJSDesignSystem, AdminJS);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
